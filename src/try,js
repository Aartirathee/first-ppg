// Define an array to store all users
const users = [
  // Sample user data: { id, name, domain, gender, availability }
  // Add more users here
];

// Initialize pagination variables
let currentPage = 1;
const usersPerPage = 20;

// Get DOM elements
const searchInput = document.getElementById('searchInput');
const domainFilter = document.getElementById('domainFilter');
const genderFilter = document.getElementById('genderFilter');
const availabilityFilter = document.getElementById('availabilityFilter');
const userList = document.getElementById('userList');
const pagination = document.getElementById('pagination');
const createTeamBtn = document.getElementById('createTeamBtn');
const teamDetails = document.getElementById('teamDetails');

// Initialize filtered users array
let filteredUsers = users;

// Function to display users in cards format
function displayUsers(usersToDisplay) {
  userList.innerHTML = '';
  usersToDisplay.forEach(user => {
    const card = document.createElement('div');
    card.classList.add('userCard');
    // Add card content here using user data (e.g., user.name, user.domain, etc.)
    userList.appendChild(card);
  });
}

// Function to display pagination links
function displayPagination() {
  pagination.innerHTML = '';
  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
  for (let i = 1; i <= totalPages; i++) {
    const pageLink = document.createElement('a');
    pageLink.href = '#';
    pageLink.textContent = i;
    pageLink.addEventListener('click', () => {
      currentPage = i;
      displayUsers(getUsersForCurrentPage());
    });
    pagination.appendChild(pageLink);
  }
}

// Function to filter users based on selected filters
function applyFilters() {
  const searchTerm = searchInput.value.toLowerCase();
  const selectedDomain = domainFilter.value;
  const selectedGender = genderFilter.value;
  constselectedAvailability = availabilityFilter.value;

  filteredUsers = users.filter(user => {
    const nameMatch = user.name.toLowerCase().includes(searchTerm);
    const domainMatch = selectedDomain === '' || user.domain === selectedDomain;
    const genderMatch = selectedGender === '' || user.gender === selectedGender;
    const availabilityMatch =
      selectedAvailability === '' || user.availability === selectedAvailability;
    return nameMatch && domainMatch && genderMatch && availabilityMatch;
  });

  currentPage = 1;
  displayUsers(getUsersForCurrentPage());
  displayPagination();
}

// Function to get the users to display for the current page
function getUsersForCurrentPage() {
  const startIndex = (currentPage - 1) * usersPerPage;
  const endIndex = startIndex + usersPerPage;
  return filteredUsers.slice(startIndex, endIndex);
}

// Function to update the team details
function updateTeamDetails() {
  // Clear previous team details
  teamDetails.innerHTML = '';

  // Get selected users for the team
  const selectedUsers = filteredUsers.filter(user => user.selected);
  
  // Create team details elements
  selectedUsers.forEach(user => {
    const userDetail = document.createElement('div');
    // Add user details to the userDetail element
    teamDetails.appendChild(userDetail);
  });
}

// Event listeners
searchInput.addEventListener('input', applyFilters);
domainFilter.addEventListener('change', applyFilters);
genderFilter.addEventListener('change', applyFilters);
availabilityFilter.addEventListener('change', applyFilters);

// Display initial user list and pagination
displayUsers(getUsersForCurrentPage());
displayPagination();

// Add event listener for create team button
createTeamBtn.addEventListener('click', updateTeamDetails);
